DELIMITER $$

CREATE PROCEDURE torneo_setup_siguiente_ronda(IN torneo_id INT)
BEGIN
    DECLARE fase_id INT;
    DECLARE  num_partidas INT;

    -- Paso 1: Determinar la fase actual (la primera ronda ya fue generada)
    SELECT MAX(id_fase) INTO fase_id
    FROM partidas
    WHERE id_torneo = torneo_id;

    -- Validar que se haya completado al menos una ronda
    IF fase_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No hay partidas previas para avanzar a la siguiente ronda.';
    END IF;
    
    -- Paso 2: Calcular la fase para la siguiente ronda
    SET fase_id = fase_id - 1;  -- Pasamos a la siguiente fase

    

    -- Determinar el número de partidas de acuerdo a la fase
    SET num_partidas = CASE
        WHEN fase_id = 6 THEN 32  -- Dieciseisavos de final
        WHEN fase_id = 5 THEN 16  -- Octavos de final
        WHEN fase_id = 4 THEN 8   -- Cuartos de final
        WHEN fase_id = 3 THEN 4   -- Semifinales
        ELSE 0
    END;


    -- Validación de la fase (si ya estamos en la final o tercer y cuarto puesto)
    IF fase_id = 2 THEN
        -- Insertar partida para el tercer y cuarto puesto con id_fase = 2
        INSERT INTO partidas (id_torneo, id_fase, id_lado_azul, id_lado_rojo, ganador)
        VALUES (torneo_id, 2, NULL, NULL, NULL);

        -- También insertar la final (id_fase = 1)
        INSERT INTO partidas (id_torneo, id_fase, id_lado_azul, id_lado_rojo, ganador)
        VALUES (torneo_id, 1, NULL, NULL, NULL);
    ELSE
        -- Paso 3: Crear la siguiente ronda sin necesidad de tabla temporal
        -- Emparejar los equipos de la ronda anterior (la mitad de los equipos avanzan)
        WHILE (num_partidas) > 1 DO

            -- Insertar la nueva partida para la siguiente ronda
            INSERT INTO partidas (id_torneo, id_fase, id_lado_azul, id_lado_rojo, ganador)
            VALUES (torneo_id, fase_id, NULL, NULL, NULL);

            num_partidas = num_partidas -1


        END WHILE;
    END IF;

END$$

DELIMITER ;